#include <stdio.h>
#include <string.h>
#pragma warning(disable:4996)
#define STACKSIZE 1000
#define STACKEMPTY 0
#define MAXBUF 1000
#define TRUE 1
#define FALSE 0

// stack
class Stack{
public:
	int pos;
	char array[STACKSIZE];
	Stack(){		// constructor
		pos = STACKEMPTY;
	}
	int empty(){
		return (pos == STACKEMPTY);
	}
	int size(){
		return pos;
	}
	char top(){
		return array[pos-1];
	}
	void push(char element){
		if (pos == STACKSIZE){
			return ;
		}
		array[pos++] = element;
	}
	char pop(){
		if (pos == STACKEMPTY){
			return '\0';
		}
		return array[--pos];
	}
};

int getNumber(char buf[], int* i);

int main(){
	//	remove freopen at linux
		freopen("infix.txt", "r", stdin);
		freopen("postfix.txt", "w", stdout);
	// remove freopen at linux

	char buf[MAXBUF];
	int number = 0;
	int i;
	int length;
	int sign;
	int isFirst;
	Stack operatorStack = Stack();
	while (TRUE){	// read line(sentence)
		buf[0] = '\0';
		gets(buf);		// read line
		if (buf == NULL || buf[0] == '\0')	// end of file
			break;
		length = strlen(buf);
		i = 0;
		sign = 1;
		isFirst = TRUE;		// if start of line, number can have sign
		while (i < length){			// parsing? number and operator
			if (buf[i] >= '0' && buf[i] <= '9'){		// if number
				number = sign * getNumber(buf, &i);		// sign == '+' or '-'
				printf("%d ",number);
				sign = 1;
				isFirst = FALSE;
			}
			else if (buf[i] == '-' || buf[i] == '+'){		// if + or -
				if (buf[i + 1] == '-' || buf[i + 1] == '+'){	// if ++ or --
					while ( !operatorStack.empty() && operatorStack.top() != '(')	// print operator without '('
						printf("%c ",operatorStack.pop());
					operatorStack.push(buf[i]);				// push + or -
					sign = (buf[i+1] == '-')? -1 : 1;
					i += 2;
					isFirst = FALSE;
				}
				else if (isFirst == TRUE && buf[i + 1] >= '0' && buf[i + 1] <= '9'){	// start of line && number have sign
					sign = (buf[i] == '-') ? -1 : 1;
					i++;
					isFirst = FALSE;
				}
				else{
					while ( !operatorStack.empty() && operatorStack.top() != '(')	// print operator until '('
						printf("%c ", operatorStack.pop());
					operatorStack.push(buf[i]);				// push + or -
					sign = 1;
					i++;
				}
			}
			else if (buf[i] == '*' || buf[i] == '/'){		// if * or /
				while (!operatorStack.empty() && (operatorStack.top() == '*' || operatorStack.top() == '/')) 	// print operator * or /
					printf("%c ", operatorStack.pop());
				operatorStack.push(buf[i]);			// push * or /
				if (buf[i + 1] == '-' || buf[i + 1] == '+'){	// if *+ or *- ...
					sign = (buf[i + 1] == '-') ? -1 : 1;
					i += 2;
				}
				else
					i++;
			}
			else if (buf[i] == '('){		// if '('
				operatorStack.push(buf[i]);
				sign = 1;
				i++;
				isFirst = TRUE;
			}
			else if (buf[i] == ')'){		// if ')'
				while ( !operatorStack.empty() && operatorStack.top() != '(')	// print operator until '('
					printf("%c ", operatorStack.pop());
				operatorStack.pop();
				i++;
			}
		}
		// end line
		while (!operatorStack.empty()){		// print remaind operator
			if (operatorStack.top() == '('){
				operatorStack.pop();
				continue;
			}
			printf("%c ", operatorStack.pop());
		}
		printf("\n");
	}
}

// read number and increase i
int getNumber(char buf[], int* i){
	int length = strlen(buf);
	int number = 0;
	for (; *i < length; (*i)++){
		if (buf[*i] < '0' || buf[*i] > '9')
			break;
		number = number * 10 + buf[*i] - '0';
	}
	return number;
}