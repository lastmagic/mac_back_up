package Mid;

import java.util.Random;

public class Three {

	private int array[][];
	private int size;
	private boolean finish = false;
	private int cnt=0;
	private int waySize[] = new int[8];
	private final int rArray[]= {-2,-1,+1,+2,+2,+1,-1,-2};
	private final int cArray[]= {+1,+2,+2,+1,-1,-2,-2,-1};
	public Three(int getSize)
	{
		array = new int[getSize][getSize];
		size = getSize;
		for(int i=0; i<getSize; i++)
		{
			for(int j=0; j<getSize; j++)
			{
				array[i][j] = -1;
			}
		}
	}
	
	public boolean Computer()
	{
		Random rand = new Random();
		int r;
		int c;
		int min=8;
		int num=-1;
		r = rand.nextInt(3);
		c = rand.nextInt(3);
		this.check(r, c);
		
		while(!this.Success())
		{
			if(this.fail(r, c))
			{
				System.out.println("Fail");
				break;
			}
			
			for(int i=0; i<size; i++)
			{
				waySize[i]=this.waySize(r+rArray[i], c+cArray[i]);
			}
			min = 8;
			for(int i=0; i<size; i++)
			{
				if(min>=waySize[i])
				{
					min = waySize[i];
					num = i;
				}
			}
			
			r = r+rArray[num];
			c = c+cArray[num];
			this.check(r,c);
		}
		
		// start from [r][c]
		// 더 이상 움직일 수 없는 상태일때 
		// for loop 돌면서 -1인 것이 있으면 false
		// for 탈출 시 true
		
		return false;
	}
	
	public int waySize(int r, int c)
	{
		
		int wSize=0;
		
		for(int i=0; i<size; i++)
		{
			if(this.movePossible(r+rArray[i], c+cArray[i]))
				wSize++;
		}
			return wSize;
	}
	
	public boolean User()
	{
		//한 번씩 할 때 마다 배열만 바꿀 수 있으면 됨
		//출력은 보드가 담당
		//더 이상 움직 일 수 없을 때 false return
		
			//한번 씩 움직일때 구현
			//더 이상 움직일 수 없는 상태일때
			// for loop 돌면서 -1인 것이 있으면 false
			// for 탈출 시 true
		
	
		
		return false;
	}
	
	public int[][] getArray()
	{
		return array; 
	}
	
	public boolean isExist(int R, int C)
	{
		if(((0<=R)&&(R<=size-1))&&((0<=C)&&(C<=size-1)))
			return true;
		else
			return false;
	}
	
	public boolean movePossible(int R, int C)
	{
		if(this.isExist(R, C)&&(this.array[R][C]==-1))
			return true;
		else
			return false;
	}
	
	public void check(int R, int C)
	{
		this.array[R][C] = cnt;
		cnt ++;
	}
	// success 가 3에 한정되어 있음 수정해야함.
	public boolean Success()
	{
		int f=0;
		for(int i=0; i<this.array.length; i++)
			for(int j=0; j<this.array[i].length; j++)
			{
				if(array[i][j]==-1)
					f++;
			}
		if(f==1)
			return true;
		else
			return false;
	}
	
	public boolean fail(int r, int c)
	{
		if(!this.movePossible(r-2, c+1)&&!this.movePossible(r-1, c+2)&&!this.movePossible(r+1, c+2)&&!this.movePossible(r+2, c+1)&&!this.movePossible(r+2, c-1)&&!this.movePossible(r+1, c-2)&&!this.movePossible(r-1, c-2)&&!this.movePossible(r-2, c-1))
			return true;
		else 
			return false;
	}
	
	public int getCnt()
	{
		return cnt;
	}
	
	
}
